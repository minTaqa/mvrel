#!/bin/bash

# Move a directory containing relative symbolic links, preserving the
# referent of each link

# Usage:
# mvrel src dst/

# It should work even if filenames contain newlines and other
# characters.

# Written 23 Feb 2019

# This was an interesting project which also helped me experiment with
# Bats, the Bash TAP-compliant testing framework. Bats made it much
# easier to catch various bugs. There may still be bugs!

# Answering https://unix.stackexchange.com/questions/485320/what-is-a-good-command-for-moving-a-directory-containing-relative-symbolic-links

# 31 Jul 2023 Add support for multiple source files (more than two arguments)

# 04 Nov 2023 Add copy mode (cprel). Change behavior to continue
# rather than exiting when one file argument has an error.

set -e

die () { >&2 echo "$@"; exit 1; }
warn () { >&2 echo "$@"; }

if test "$#" -lt 2; then
    die Need at least two arguments
fi

ME=$(basename $0)

# Comment or uncomment these to change verbosity
dbg () { true; }
#dbg () { >&2 echo "$@"; }
verb () { >&2 echo "$@"; }

# Helper. Command substitution, without deleting trailing newlines.
# To delete exactly N trailing newlines, pass -N as first argument
# See https://stackoverflow.com/questions/613572/capturing-multiple-line-output-into-a-bash-variable
# and https://raw.githubusercontent.com/l0b0/tilde/master/examples/safe-find.sh
cmd2var () {
    COUNT=0
    if [[ "$1" = -* ]]; then
        COUNT="${1#-}"; shift
    fi
    VAR=$1; shift
    # -r: don't treat backslash specially
    # -d '': use NULL as line-delimiter
    IFS= read -rd '' $VAR < <( "$@" ) || true
    while [[ $COUNT -gt 0 ]]; do
        declare -g $VAR="${!VAR%$'\n'}"
        COUNT=$((COUNT-1))
    done
}

# Helper function. realpath seems to lack an argument to specify the
# base for relative paths, so we have to do "cd"
realpath_base () {
  (cd "$1";
    realpath -s -m -- "$2")
}

mv_one () {
  # The command arguments
  SRC=$1
  DST=$2
  # DST must be a directory for now
  # NEWSRC is the final path where SRC is moved to
  cmd2var -1 NEWSRC basename -- "$SRC"
  NEWSRC="$DST/$NEWSRC"
  dbg SRC=$SRC
  dbg DST=$DST
  dbg NEWSRC=$NEWSRC

  # XXX 04 Nov 2023 could move this out of file loop
  if ! test -d "$DST"; then
    warn Second argument must be directory
    return 1
  fi
  if ! test -e "$SRC"; then
    # 15 Mar 2021 is this the right logic?
    if test -L "$SRC"; then
      warn Warning: Source $SRC is a broken symlink
    else
      warn Source $SRC does not exist
      return 1
    fi
  fi

  cmd2var -1 SRCR realpath -s -- "$SRC"
  cmd2var -1 DSTR realpath -s -- "$DST"

  if [[ "$DSTR" = "$SRCR"* ]]; then
    warn Can\'t move directory into itself: "$DSTR"
    return 1
  fi

  NEWBASE="$NEWSRC"
  # Handle case where source is symlink, in which case the new base is
  # dirname of NEWSRC
  if test -L "$SRCR"; then
    dbg Source is symlink
    # source is a link, use dirname instead
    cmd2var -1 NEWBASE dirname "$NEWSRC"
  fi

  verb Rewriting links
  # Rewrite all the links before moving
  # read -d '' means use NUL termination, -r means don't interpret backslash
  find "$SRCR" -type l -print0 | while IFS= read -r -d '' i; do
    # readlink -f worked OK but we actually want to allow linking to a
    # symlink; in such cases it should only be dereferenced once, but
    # readlink -f dereferences the entire chain. so we use readlink +
    # realpath_base
    #    cmd2var -1 RP readlink -f -- "$i"
    cmd2var -1 di dirname -- "$i"
    cmd2var -1 RL readlink -- "$i"
    cmd2var -1 RP realpath_base "$di" "$RL"
    if [[ "$RP" = "$SRCR"* ]]; then
      dbg Link points under src
    else
      # need to strip first part of RP and use dirname after NEWBASE
      # also use realpath -s and $RP below, not $i
      cmd2var -1 PATHINSRC dirname "${i#"$SRCR"}"

      # 16 Mar 2021 had to insert "/" between $NEWBASE and
      # $PATHINSRC below in case both are "." (t02-mvrel-up)
      cmd2var -1 NEWLINK realpath -s -m --relative-to "$NEWBASE/$PATHINSRC" -- "$RP"
      dbg Link points outside SRC, rewriting $i as $NEWLINK
      # -T makes it work if $i is directory
      ln -sfT -- "$NEWLINK" "$i"
    fi
  done

  mv -- "$SRC" "$DST"
}

cp_one () {
  # 04 Nov 2023 copying is currently done by copying to a temporary
  # destination in the same directory, then moving to the final
  # destination. if we are doing an inter-device copy, this will be
  # inefficient as it will include an extra copy. we could fix this by
  # rewriting the copy functionality so that it duplicates more of the
  # code in mv_one (copy first, then traverse the original tree and
  # fixup the copy). low priority because we don't expect to use this
  # for inter-device copies of trees with large files
  SRC=$1
  DST=$2
  TSRC="$SRC.cprel.$RANDOM"
  cmd2var -1 BTSRC basename -- "$TSRC"
  cmd2var -1 BSRC basename -- "$SRC"
  if test -e "$DST/$BSRC"; then
    warn "$DST/$BSRC already exists"
    return 1
  fi
  cp -a -- "$SRC" "$TSRC" || return 1
  mv_one "$TSRC" "$DST" || return 1
  dbg Renaming "$DST/$BTSRC" to "$DST/$BSRC"
  mv -- "$DST/$BTSRC" "$DST/$BSRC" || return 1
}

dst="${@:$#}"
if test $ME = 'mvrel'; then
  HAD_ERR=0
  for src in "${@:1:$#-1}"; do
    verb Moving $src to $dst
    mv_one "$src" "$dst" || HAD_ERR=1
  done
  exit $HAD_ERR
else if test $ME = 'cprel'; then
  for src in "${@:1:$#-1}"; do
    verb Copying $src to $dst
    cp_one "$src" "$dst" || HAD_ERR=1
  done
  exit $HAD_ERR
else    die "Unknown script name (should be mvrel or cprel): $ME"
fi; fi
